# TODO: Automatically create droplet, secure it, provision (maybe with Docker)

---
- hosts: hardchat
  tasks:
    - name: Change root password
      user: name=root password="{{ root_password }}"

    - name: Create the project directory
      file: state=directory path={{ project_root }}

    - name: Add deploy user
      user: name={{ deploy_user_name }} password="{{ deploy_user_password }}" shell=/bin/bash

    - name: Update the project directory
      file: owner={{ deploy_user_name }} mode=755 state=directory path={{ project_root }}

    - name: Create the code directory
      file: owner={{ deploy_user_name }} mode=755 state=directory path={{ project_root }}/code/

    - name: Add authorized keys for deploy user
      authorized_key: user={{ deploy_user_name }}
                      key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
      with_items: deploy_public_keys

    - name: Add deploy user to sudoers
      lineinfile: dest=/etc/sudoers
                  regexp="{{ deploy_user_name }} ALL"
                  line="{{ deploy_user_name }} ALL=(ALL) ALL"
                  state=present

    - name: Add ppa:fkrull/deadsnakes (for newest Python)
      apt_repository: repo='ppa:fkrull/deadsnakes'

    - name: Update Ubuntu packages cache
      apt: update_cache=yes cache_valid_time=3600

    - name: Upgrade Ubuntu packages
      apt: upgrade=full

    - name: Install fail2ban
      apt: name=fail2ban state=latest

    - name: Install nginx
      apt: name=nginx state=latest

    - name: Install build-essential
      apt: name=build-essential state=latest

    - name: Install libpq-dev
      apt: name=libpq-dev state=latest

    - name: Install gettext
      apt: name=gettext state=latest

    - name: Install redis-server
      apt: name=redis-server state=latest

    - name: Install git
      apt: name=git state=latest

    - name: Install mercurial
      apt: name=mercurial state=latest

    - name: Install postgresql
      apt: name=postgresql state=latest

    - name: Install postgresql-contrib
      apt: name=postgresql-contrib state=latest

    - name: Change postgres user password
      user: name=postgres password="{{ postgres_password }}"

    - name: Install supervisor
      apt: name=supervisor state=latest

    - name: Install Python 3.5
      apt: name=python3.5 state=latest

    - name: Install Python 3.5-dev
      apt: name=python3.5-dev state=latest

    - name: Install Python 2 dev
      apt: name=python-dev state=latest

    - name: Install setuptools
      apt: name=python3-setuptools state=latest

    - name: Install pip (for Python 2)
      apt: name=python-pip state=latest

    - name: Install psycopg2 (for Python 2)
      pip: name=psycopg2 executable=pip
      become: True

    - name: Create PostgreSQL database
      become: yes
      become_user: postgres
      postgresql_db: name=hardchat
                     encoding='UTF-8'
                     lc_collate='en_US.UTF-8'
                     lc_ctype='en_US.UTF-8'
                     template='template0'

    - name: Create PostgreSQL user
      become: yes
      become_user: postgres
      postgresql_user: db=hardchat
                       name={{ deploy_user_name }}
                       password={{ postgres_password }}
                       role_attr_flags=SUPERUSER

    - name: Setup ufw
      ufw: state=enabled policy=deny

    - name: Allow HTTP traffic (port 80)
      ufw: rule=allow port=80 proto=tcp

    - name: Allow HTTPS traffic (port 443)
      ufw: rule=allow port=443 proto=tcp

    - name: Allow ssh traffic (port 22)
      ufw: rule=allow port=22 proto=tcp

    - name: Disallow password authentication
      lineinfile: dest=/etc/ssh/sshd_config
                  regexp="^PasswordAuthentication"
                  line="PasswordAuthentication no"
                  state=present
      notify: Restart ssh

    - name: Disallow root SSH access
      lineinfile: dest=/etc/ssh/sshd_config
                  regexp="^PermitRootLogin"
                  line="PermitRootLogin no"
                  state=present
      notify: Restart ssh

    - name: Pull code from the repository
      git: repo={{ project_repo }} dest={{ project_root }}/code/ version=master accept_hostkey=True

    - name: Install nginx configuration file
      template: src=nginx_conf.j2 dest=/etc/nginx/sites-enabled/{{ project_name }}
      notify: restart nginx

  handlers:
    - name: start nginx
      service: name=nginx state=started

    - name: restart nginx
      service: name=nginx state=restarted

    - name: Restart ssh
      service: name=ssh state=restarted